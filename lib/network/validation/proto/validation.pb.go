// Code generated by protoc-gen-gogo.
// source: validation.proto
// DO NOT EDIT!

/*
	Package proto is a generated protocol buffer package.

	It is generated from these files:
		validation.proto

	It has these top-level messages:
		CheckPortsRequest
		CheckPortsResponse
		CheckBandwidthRequest
		CheckBandwidthResponse
		ServerResult
		Addr
		ValidateRequest
		ValidateResponse
		ValidateOptions
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/gogo/protobuf/types"
import agentpb "github.com/gravitational/satellite/agent/proto/agentpb"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto1.ProtoPackageIsVersion2 // please upgrade the proto package

// CheckPortsRequest describes a ports network test request
type CheckPortsRequest struct {
	// Listen specifies the listen endpoints
	Listen []*Addr `protobuf:"bytes,1,rep,name=listen" json:"listen,omitempty"`
	// Ping specifies the ping endpoints
	Ping []*Addr `protobuf:"bytes,2,rep,name=ping" json:"ping,omitempty"`
	// Duration specifies the maximum duration for the request
	Duration *google_protobuf.Duration `protobuf:"bytes,3,opt,name=duration" json:"duration,omitempty"`
}

func (m *CheckPortsRequest) Reset()                    { *m = CheckPortsRequest{} }
func (m *CheckPortsRequest) String() string            { return proto1.CompactTextString(m) }
func (*CheckPortsRequest) ProtoMessage()               {}
func (*CheckPortsRequest) Descriptor() ([]byte, []int) { return fileDescriptorValidation, []int{0} }

func (m *CheckPortsRequest) GetListen() []*Addr {
	if m != nil {
		return m.Listen
	}
	return nil
}

func (m *CheckPortsRequest) GetPing() []*Addr {
	if m != nil {
		return m.Ping
	}
	return nil
}

func (m *CheckPortsRequest) GetDuration() *google_protobuf.Duration {
	if m != nil {
		return m.Duration
	}
	return nil
}

// CheckPortsResponse describes the results of a ports network test
type CheckPortsResponse struct {
	// Listen describes the listen test results
	Listen []*ServerResult `protobuf:"bytes,1,rep,name=listen" json:"listen,omitempty"`
	// Ping describes the ping test results
	Ping []*ServerResult `protobuf:"bytes,2,rep,name=ping" json:"ping,omitempty"`
}

func (m *CheckPortsResponse) Reset()                    { *m = CheckPortsResponse{} }
func (m *CheckPortsResponse) String() string            { return proto1.CompactTextString(m) }
func (*CheckPortsResponse) ProtoMessage()               {}
func (*CheckPortsResponse) Descriptor() ([]byte, []int) { return fileDescriptorValidation, []int{1} }

func (m *CheckPortsResponse) GetListen() []*ServerResult {
	if m != nil {
		return m.Listen
	}
	return nil
}

func (m *CheckPortsResponse) GetPing() []*ServerResult {
	if m != nil {
		return m.Ping
	}
	return nil
}

// CheckBandwidthRequest describes a bandwidth check network test
type CheckBandwidthRequest struct {
	// Listen specifies the listen endpoint
	Listen *Addr `protobuf:"bytes,1,opt,name=listen" json:"listen,omitempty"`
	// Ping specifies the ping endpoints
	Ping []*Addr `protobuf:"bytes,2,rep,name=ping" json:"ping,omitempty"`
	// Duration specifies the maximum duration for the request
	Duration *google_protobuf.Duration `protobuf:"bytes,3,opt,name=duration" json:"duration,omitempty"`
}

func (m *CheckBandwidthRequest) Reset()                    { *m = CheckBandwidthRequest{} }
func (m *CheckBandwidthRequest) String() string            { return proto1.CompactTextString(m) }
func (*CheckBandwidthRequest) ProtoMessage()               {}
func (*CheckBandwidthRequest) Descriptor() ([]byte, []int) { return fileDescriptorValidation, []int{2} }

func (m *CheckBandwidthRequest) GetListen() *Addr {
	if m != nil {
		return m.Listen
	}
	return nil
}

func (m *CheckBandwidthRequest) GetPing() []*Addr {
	if m != nil {
		return m.Ping
	}
	return nil
}

func (m *CheckBandwidthRequest) GetDuration() *google_protobuf.Duration {
	if m != nil {
		return m.Duration
	}
	return nil
}

// CheckBandwidthResponse describes the results of a bandwidth check
type CheckBandwidthResponse struct {
	// Bandwidth is the result of a bandwidth test
	Bandwidth uint64 `protobuf:"varint,1,opt,name=bandwidth,proto3" json:"bandwidth,omitempty"`
}

func (m *CheckBandwidthResponse) Reset()                    { *m = CheckBandwidthResponse{} }
func (m *CheckBandwidthResponse) String() string            { return proto1.CompactTextString(m) }
func (*CheckBandwidthResponse) ProtoMessage()               {}
func (*CheckBandwidthResponse) Descriptor() ([]byte, []int) { return fileDescriptorValidation, []int{3} }

func (m *CheckBandwidthResponse) GetBandwidth() uint64 {
	if m != nil {
		return m.Bandwidth
	}
	return 0
}

// ServerResult defines the operation result for a server
type ServerResult struct {
	// Code specifies the result, with 0 for success
	Code int32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	// Error specifies an error message
	Error string `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	// Server specifies which server the result is from
	Server *Addr `protobuf:"bytes,3,opt,name=server" json:"server,omitempty"`
}

func (m *ServerResult) Reset()                    { *m = ServerResult{} }
func (m *ServerResult) String() string            { return proto1.CompactTextString(m) }
func (*ServerResult) ProtoMessage()               {}
func (*ServerResult) Descriptor() ([]byte, []int) { return fileDescriptorValidation, []int{4} }

func (m *ServerResult) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *ServerResult) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *ServerResult) GetServer() *Addr {
	if m != nil {
		return m.Server
	}
	return nil
}

// Addr defines an endpoint address
type Addr struct {
	// Network specifies the type of network (tcp, udp)
	Network string `protobuf:"bytes,1,opt,name=network,proto3" json:"network,omitempty"`
	// Addr specifies the address as IP or IP:port
	Addr string `protobuf:"bytes,2,opt,name=addr,proto3" json:"addr,omitempty"`
}

func (m *Addr) Reset()                    { *m = Addr{} }
func (m *Addr) String() string            { return proto1.CompactTextString(m) }
func (*Addr) ProtoMessage()               {}
func (*Addr) Descriptor() ([]byte, []int) { return fileDescriptorValidation, []int{5} }

func (m *Addr) GetNetwork() string {
	if m != nil {
		return m.Network
	}
	return ""
}

func (m *Addr) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

// ValidateRequest defines a request to run validation
type ValidateRequest struct {
	// Manifest specifies the application manifest with
	// requirements
	Manifest []byte `protobuf:"bytes,1,opt,name=manifest,proto3" json:"manifest,omitempty"`
	// Profile specifies the node profile to validate against
	Profile string `protobuf:"bytes,2,opt,name=profile,proto3" json:"profile,omitempty"`
	// FullRequirements forces validation of all requirements
	// from the manifest.
	// This is used to validate requirements during installation.
	FullRequirements bool `protobuf:"varint,3,opt,name=full_requirements,json=fullRequirements,proto3" json:"full_requirements,omitempty"`
	// ValidateOptions is additional validation options
	Options *ValidateOptions `protobuf:"bytes,4,opt,name=options" json:"options,omitempty"`
}

func (m *ValidateRequest) Reset()                    { *m = ValidateRequest{} }
func (m *ValidateRequest) String() string            { return proto1.CompactTextString(m) }
func (*ValidateRequest) ProtoMessage()               {}
func (*ValidateRequest) Descriptor() ([]byte, []int) { return fileDescriptorValidation, []int{6} }

func (m *ValidateRequest) GetManifest() []byte {
	if m != nil {
		return m.Manifest
	}
	return nil
}

func (m *ValidateRequest) GetProfile() string {
	if m != nil {
		return m.Profile
	}
	return ""
}

func (m *ValidateRequest) GetFullRequirements() bool {
	if m != nil {
		return m.FullRequirements
	}
	return false
}

func (m *ValidateRequest) GetOptions() *ValidateOptions {
	if m != nil {
		return m.Options
	}
	return nil
}

// ValidateResponse describes a validation response
type ValidateResponse struct {
	// Failed lists the failed probes
	Failed []*agentpb.Probe `protobuf:"bytes,1,rep,name=failed" json:"failed,omitempty"`
}

func (m *ValidateResponse) Reset()                    { *m = ValidateResponse{} }
func (m *ValidateResponse) String() string            { return proto1.CompactTextString(m) }
func (*ValidateResponse) ProtoMessage()               {}
func (*ValidateResponse) Descriptor() ([]byte, []int) { return fileDescriptorValidation, []int{7} }

func (m *ValidateResponse) GetFailed() []*agentpb.Probe {
	if m != nil {
		return m.Failed
	}
	return nil
}

// ValidateOptions is additional validation options
type ValidateOptions struct {
	// VxlanPort is the custom overlay network port
	VxlanPort int32 `protobuf:"varint,1,opt,name=vxlan_port,json=vxlanPort,proto3" json:"vxlan_port,omitempty"`
	// DnsListenAddr specifies the listen address for dnsmasq
	DnsListenAddr string `protobuf:"bytes,2,opt,name=dns_listen_addr,json=dnsListenAddr,proto3" json:"dns_listen_addr,omitempty"`
}

func (m *ValidateOptions) Reset()                    { *m = ValidateOptions{} }
func (m *ValidateOptions) String() string            { return proto1.CompactTextString(m) }
func (*ValidateOptions) ProtoMessage()               {}
func (*ValidateOptions) Descriptor() ([]byte, []int) { return fileDescriptorValidation, []int{8} }

func (m *ValidateOptions) GetVxlanPort() int32 {
	if m != nil {
		return m.VxlanPort
	}
	return 0
}

func (m *ValidateOptions) GetDnsListenAddr() string {
	if m != nil {
		return m.DnsListenAddr
	}
	return ""
}

func init() {
	proto1.RegisterType((*CheckPortsRequest)(nil), "proto.CheckPortsRequest")
	proto1.RegisterType((*CheckPortsResponse)(nil), "proto.CheckPortsResponse")
	proto1.RegisterType((*CheckBandwidthRequest)(nil), "proto.CheckBandwidthRequest")
	proto1.RegisterType((*CheckBandwidthResponse)(nil), "proto.CheckBandwidthResponse")
	proto1.RegisterType((*ServerResult)(nil), "proto.ServerResult")
	proto1.RegisterType((*Addr)(nil), "proto.Addr")
	proto1.RegisterType((*ValidateRequest)(nil), "proto.ValidateRequest")
	proto1.RegisterType((*ValidateResponse)(nil), "proto.ValidateResponse")
	proto1.RegisterType((*ValidateOptions)(nil), "proto.ValidateOptions")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Validation service

type ValidationClient interface {
	// CheckPorts executes a ports network test
	CheckPorts(ctx context.Context, in *CheckPortsRequest, opts ...grpc.CallOption) (*CheckPortsResponse, error)
	// CheckBandwidth executes a bandwidth network test
	CheckBandwidth(ctx context.Context, in *CheckBandwidthRequest, opts ...grpc.CallOption) (*CheckBandwidthResponse, error)
	// Validate validatest this node against the requirements
	// from a manifest.
	Validate(ctx context.Context, in *ValidateRequest, opts ...grpc.CallOption) (*ValidateResponse, error)
}

type validationClient struct {
	cc *grpc.ClientConn
}

func NewValidationClient(cc *grpc.ClientConn) ValidationClient {
	return &validationClient{cc}
}

func (c *validationClient) CheckPorts(ctx context.Context, in *CheckPortsRequest, opts ...grpc.CallOption) (*CheckPortsResponse, error) {
	out := new(CheckPortsResponse)
	err := grpc.Invoke(ctx, "/proto.Validation/CheckPorts", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *validationClient) CheckBandwidth(ctx context.Context, in *CheckBandwidthRequest, opts ...grpc.CallOption) (*CheckBandwidthResponse, error) {
	out := new(CheckBandwidthResponse)
	err := grpc.Invoke(ctx, "/proto.Validation/CheckBandwidth", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *validationClient) Validate(ctx context.Context, in *ValidateRequest, opts ...grpc.CallOption) (*ValidateResponse, error) {
	out := new(ValidateResponse)
	err := grpc.Invoke(ctx, "/proto.Validation/Validate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Validation service

type ValidationServer interface {
	// CheckPorts executes a ports network test
	CheckPorts(context.Context, *CheckPortsRequest) (*CheckPortsResponse, error)
	// CheckBandwidth executes a bandwidth network test
	CheckBandwidth(context.Context, *CheckBandwidthRequest) (*CheckBandwidthResponse, error)
	// Validate validatest this node against the requirements
	// from a manifest.
	Validate(context.Context, *ValidateRequest) (*ValidateResponse, error)
}

func RegisterValidationServer(s *grpc.Server, srv ValidationServer) {
	s.RegisterService(&_Validation_serviceDesc, srv)
}

func _Validation_CheckPorts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckPortsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ValidationServer).CheckPorts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Validation/CheckPorts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ValidationServer).CheckPorts(ctx, req.(*CheckPortsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Validation_CheckBandwidth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckBandwidthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ValidationServer).CheckBandwidth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Validation/CheckBandwidth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ValidationServer).CheckBandwidth(ctx, req.(*CheckBandwidthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Validation_Validate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ValidationServer).Validate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Validation/Validate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ValidationServer).Validate(ctx, req.(*ValidateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Validation_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Validation",
	HandlerType: (*ValidationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckPorts",
			Handler:    _Validation_CheckPorts_Handler,
		},
		{
			MethodName: "CheckBandwidth",
			Handler:    _Validation_CheckBandwidth_Handler,
		},
		{
			MethodName: "Validate",
			Handler:    _Validation_Validate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "validation.proto",
}

func (m *CheckPortsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckPortsRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Listen) > 0 {
		for _, msg := range m.Listen {
			dAtA[i] = 0xa
			i++
			i = encodeVarintValidation(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Ping) > 0 {
		for _, msg := range m.Ping {
			dAtA[i] = 0x12
			i++
			i = encodeVarintValidation(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Duration != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintValidation(dAtA, i, uint64(m.Duration.Size()))
		n1, err := m.Duration.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *CheckPortsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckPortsResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Listen) > 0 {
		for _, msg := range m.Listen {
			dAtA[i] = 0xa
			i++
			i = encodeVarintValidation(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Ping) > 0 {
		for _, msg := range m.Ping {
			dAtA[i] = 0x12
			i++
			i = encodeVarintValidation(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *CheckBandwidthRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckBandwidthRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Listen != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintValidation(dAtA, i, uint64(m.Listen.Size()))
		n2, err := m.Listen.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if len(m.Ping) > 0 {
		for _, msg := range m.Ping {
			dAtA[i] = 0x12
			i++
			i = encodeVarintValidation(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Duration != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintValidation(dAtA, i, uint64(m.Duration.Size()))
		n3, err := m.Duration.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}

func (m *CheckBandwidthResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckBandwidthResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Bandwidth != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintValidation(dAtA, i, uint64(m.Bandwidth))
	}
	return i, nil
}

func (m *ServerResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServerResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintValidation(dAtA, i, uint64(m.Code))
	}
	if len(m.Error) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintValidation(dAtA, i, uint64(len(m.Error)))
		i += copy(dAtA[i:], m.Error)
	}
	if m.Server != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintValidation(dAtA, i, uint64(m.Server.Size()))
		n4, err := m.Server.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}

func (m *Addr) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Addr) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Network) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintValidation(dAtA, i, uint64(len(m.Network)))
		i += copy(dAtA[i:], m.Network)
	}
	if len(m.Addr) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintValidation(dAtA, i, uint64(len(m.Addr)))
		i += copy(dAtA[i:], m.Addr)
	}
	return i, nil
}

func (m *ValidateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValidateRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Manifest) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintValidation(dAtA, i, uint64(len(m.Manifest)))
		i += copy(dAtA[i:], m.Manifest)
	}
	if len(m.Profile) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintValidation(dAtA, i, uint64(len(m.Profile)))
		i += copy(dAtA[i:], m.Profile)
	}
	if m.FullRequirements {
		dAtA[i] = 0x18
		i++
		if m.FullRequirements {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Options != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintValidation(dAtA, i, uint64(m.Options.Size()))
		n5, err := m.Options.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}

func (m *ValidateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValidateResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Failed) > 0 {
		for _, msg := range m.Failed {
			dAtA[i] = 0xa
			i++
			i = encodeVarintValidation(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ValidateOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValidateOptions) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.VxlanPort != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintValidation(dAtA, i, uint64(m.VxlanPort))
	}
	if len(m.DnsListenAddr) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintValidation(dAtA, i, uint64(len(m.DnsListenAddr)))
		i += copy(dAtA[i:], m.DnsListenAddr)
	}
	return i, nil
}

func encodeFixed64Validation(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Validation(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintValidation(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *CheckPortsRequest) Size() (n int) {
	var l int
	_ = l
	if len(m.Listen) > 0 {
		for _, e := range m.Listen {
			l = e.Size()
			n += 1 + l + sovValidation(uint64(l))
		}
	}
	if len(m.Ping) > 0 {
		for _, e := range m.Ping {
			l = e.Size()
			n += 1 + l + sovValidation(uint64(l))
		}
	}
	if m.Duration != nil {
		l = m.Duration.Size()
		n += 1 + l + sovValidation(uint64(l))
	}
	return n
}

func (m *CheckPortsResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.Listen) > 0 {
		for _, e := range m.Listen {
			l = e.Size()
			n += 1 + l + sovValidation(uint64(l))
		}
	}
	if len(m.Ping) > 0 {
		for _, e := range m.Ping {
			l = e.Size()
			n += 1 + l + sovValidation(uint64(l))
		}
	}
	return n
}

func (m *CheckBandwidthRequest) Size() (n int) {
	var l int
	_ = l
	if m.Listen != nil {
		l = m.Listen.Size()
		n += 1 + l + sovValidation(uint64(l))
	}
	if len(m.Ping) > 0 {
		for _, e := range m.Ping {
			l = e.Size()
			n += 1 + l + sovValidation(uint64(l))
		}
	}
	if m.Duration != nil {
		l = m.Duration.Size()
		n += 1 + l + sovValidation(uint64(l))
	}
	return n
}

func (m *CheckBandwidthResponse) Size() (n int) {
	var l int
	_ = l
	if m.Bandwidth != 0 {
		n += 1 + sovValidation(uint64(m.Bandwidth))
	}
	return n
}

func (m *ServerResult) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovValidation(uint64(m.Code))
	}
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovValidation(uint64(l))
	}
	if m.Server != nil {
		l = m.Server.Size()
		n += 1 + l + sovValidation(uint64(l))
	}
	return n
}

func (m *Addr) Size() (n int) {
	var l int
	_ = l
	l = len(m.Network)
	if l > 0 {
		n += 1 + l + sovValidation(uint64(l))
	}
	l = len(m.Addr)
	if l > 0 {
		n += 1 + l + sovValidation(uint64(l))
	}
	return n
}

func (m *ValidateRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Manifest)
	if l > 0 {
		n += 1 + l + sovValidation(uint64(l))
	}
	l = len(m.Profile)
	if l > 0 {
		n += 1 + l + sovValidation(uint64(l))
	}
	if m.FullRequirements {
		n += 2
	}
	if m.Options != nil {
		l = m.Options.Size()
		n += 1 + l + sovValidation(uint64(l))
	}
	return n
}

func (m *ValidateResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.Failed) > 0 {
		for _, e := range m.Failed {
			l = e.Size()
			n += 1 + l + sovValidation(uint64(l))
		}
	}
	return n
}

func (m *ValidateOptions) Size() (n int) {
	var l int
	_ = l
	if m.VxlanPort != 0 {
		n += 1 + sovValidation(uint64(m.VxlanPort))
	}
	l = len(m.DnsListenAddr)
	if l > 0 {
		n += 1 + l + sovValidation(uint64(l))
	}
	return n
}

func sovValidation(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozValidation(x uint64) (n int) {
	return sovValidation(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CheckPortsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValidation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckPortsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckPortsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Listen", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValidation
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Listen = append(m.Listen, &Addr{})
			if err := m.Listen[len(m.Listen)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ping", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValidation
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ping = append(m.Ping, &Addr{})
			if err := m.Ping[len(m.Ping)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValidation
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Duration == nil {
				m.Duration = &google_protobuf.Duration{}
			}
			if err := m.Duration.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipValidation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthValidation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckPortsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValidation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckPortsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckPortsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Listen", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValidation
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Listen = append(m.Listen, &ServerResult{})
			if err := m.Listen[len(m.Listen)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ping", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValidation
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ping = append(m.Ping, &ServerResult{})
			if err := m.Ping[len(m.Ping)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipValidation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthValidation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckBandwidthRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValidation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckBandwidthRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckBandwidthRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Listen", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValidation
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Listen == nil {
				m.Listen = &Addr{}
			}
			if err := m.Listen.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ping", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValidation
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ping = append(m.Ping, &Addr{})
			if err := m.Ping[len(m.Ping)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValidation
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Duration == nil {
				m.Duration = &google_protobuf.Duration{}
			}
			if err := m.Duration.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipValidation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthValidation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckBandwidthResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValidation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckBandwidthResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckBandwidthResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bandwidth", wireType)
			}
			m.Bandwidth = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Bandwidth |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipValidation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthValidation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServerResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValidation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServerResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServerResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValidation
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Server", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValidation
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Server == nil {
				m.Server = &Addr{}
			}
			if err := m.Server.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipValidation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthValidation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Addr) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValidation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Addr: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Addr: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Network", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValidation
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Network = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValidation
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipValidation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthValidation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ValidateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValidation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValidateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValidateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Manifest", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthValidation
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Manifest = append(m.Manifest[:0], dAtA[iNdEx:postIndex]...)
			if m.Manifest == nil {
				m.Manifest = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Profile", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValidation
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Profile = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FullRequirements", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FullRequirements = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Options", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValidation
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Options == nil {
				m.Options = &ValidateOptions{}
			}
			if err := m.Options.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipValidation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthValidation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ValidateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValidation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValidateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValidateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Failed", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValidation
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Failed = append(m.Failed, &agentpb.Probe{})
			if err := m.Failed[len(m.Failed)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipValidation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthValidation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ValidateOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValidation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValidateOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValidateOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VxlanPort", wireType)
			}
			m.VxlanPort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VxlanPort |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DnsListenAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValidation
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DnsListenAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipValidation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthValidation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipValidation(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowValidation
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowValidation
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowValidation
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthValidation
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowValidation
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipValidation(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthValidation = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowValidation   = fmt.Errorf("proto: integer overflow")
)

func init() { proto1.RegisterFile("validation.proto", fileDescriptorValidation) }

var fileDescriptorValidation = []byte{
	// 567 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x53, 0xcd, 0x6e, 0x13, 0x3d,
	0x14, 0xfd, 0xdc, 0x26, 0x69, 0x72, 0xd3, 0xaf, 0x4d, 0x5d, 0x28, 0xd3, 0xa8, 0x0d, 0xd1, 0x20,
	0x95, 0x48, 0x95, 0x26, 0x28, 0xfc, 0x2c, 0x60, 0xd5, 0xc2, 0x12, 0x44, 0x65, 0xa4, 0x8a, 0x0d,
	0x8a, 0x26, 0xb5, 0x93, 0x0e, 0x9d, 0xda, 0x53, 0xdb, 0x93, 0xf2, 0x18, 0x2c, 0x58, 0xf0, 0x04,
	0x3c, 0x0b, 0x4b, 0xf6, 0x6c, 0x50, 0x78, 0x11, 0x34, 0x1e, 0x3b, 0x99, 0xfc, 0xb0, 0x65, 0x35,
	0xbe, 0xf7, 0x1e, 0x5f, 0x9f, 0x73, 0xe6, 0x5e, 0x68, 0x8c, 0xc3, 0x38, 0xa2, 0xa1, 0x8e, 0x04,
	0x0f, 0x12, 0x29, 0xb4, 0xc0, 0x65, 0xf3, 0x69, 0xb6, 0x46, 0x42, 0x8c, 0x62, 0xd6, 0x35, 0xd1,
	0x20, 0x1d, 0x76, 0x69, 0x2a, 0x0b, 0xb0, 0xe6, 0x6e, 0x38, 0x62, 0x5c, 0x27, 0x83, 0xae, 0xf9,
	0xe6, 0x49, 0xff, 0x33, 0x82, 0x9d, 0x97, 0x97, 0xec, 0xe2, 0xea, 0x4c, 0x48, 0xad, 0x08, 0xbb,
	0x49, 0x99, 0xd2, 0xf8, 0x01, 0x54, 0xe2, 0x48, 0x69, 0xc6, 0x3d, 0xd4, 0x5e, 0xef, 0xd4, 0x7b,
	0xf5, 0x1c, 0x1d, 0x9c, 0x50, 0x2a, 0x89, 0x2d, 0xe1, 0xfb, 0x50, 0x4a, 0x22, 0x3e, 0xf2, 0xd6,
	0x96, 0x21, 0xa6, 0x80, 0x9f, 0x42, 0xd5, 0x51, 0xf0, 0xd6, 0xdb, 0xa8, 0x53, 0xef, 0xed, 0x07,
	0x39, 0xc7, 0xc0, 0x71, 0x0c, 0x5e, 0x59, 0x00, 0x99, 0x42, 0xfd, 0x8f, 0x80, 0x8b, 0x8c, 0x54,
	0x22, 0xb8, 0x62, 0xf8, 0x78, 0x81, 0xd2, 0xae, 0x7d, 0xef, 0x1d, 0x93, 0x63, 0x26, 0x09, 0x53,
	0x69, 0xac, 0xa7, 0xd4, 0x1e, 0xce, 0x51, 0x5b, 0x09, 0x35, 0x00, 0xff, 0x0b, 0x82, 0xbb, 0xe6,
	0xb1, 0xd3, 0x90, 0xd3, 0xdb, 0x88, 0xea, 0xcb, 0x55, 0x16, 0xa0, 0x7f, 0x6d, 0xc1, 0x33, 0xd8,
	0x5b, 0x64, 0x65, 0x6d, 0x38, 0x80, 0xda, 0xc0, 0x25, 0x0d, 0xb3, 0x12, 0x99, 0x25, 0xfc, 0x0f,
	0xb0, 0x59, 0x14, 0x89, 0x31, 0x94, 0x2e, 0x04, 0x65, 0x06, 0x58, 0x26, 0xe6, 0x8c, 0xef, 0x40,
	0x99, 0x49, 0x29, 0xa4, 0xb7, 0xd6, 0x46, 0x9d, 0x1a, 0xc9, 0x83, 0x4c, 0xae, 0x32, 0x37, 0x2d,
	0xcd, 0x79, 0xb9, 0x79, 0xc9, 0x7f, 0x02, 0xa5, 0x2c, 0xc6, 0x1e, 0x6c, 0x70, 0xa6, 0x6f, 0x85,
	0xbc, 0x32, 0x9d, 0x6b, 0xc4, 0x85, 0xd9, 0x83, 0x21, 0xa5, 0xae, 0xb7, 0x39, 0xfb, 0xdf, 0x10,
	0x6c, 0x9f, 0xe7, 0x33, 0xcb, 0x9c, 0xbb, 0x4d, 0xa8, 0x5e, 0x87, 0x3c, 0x1a, 0x32, 0xa5, 0x4d,
	0x8b, 0x4d, 0x32, 0x8d, 0xb3, 0xee, 0x89, 0x14, 0xc3, 0x28, 0x66, 0xb6, 0x8d, 0x0b, 0xf1, 0x31,
	0xec, 0x0c, 0xd3, 0x38, 0xee, 0x4b, 0x76, 0x93, 0x46, 0x92, 0x5d, 0x33, 0xae, 0x95, 0xe1, 0x5b,
	0x25, 0x8d, 0xac, 0x40, 0x0a, 0x79, 0xfc, 0x08, 0x36, 0x44, 0x92, 0xb9, 0xa9, 0xbc, 0x92, 0x91,
	0xb4, 0x67, 0x25, 0x39, 0x2e, 0x6f, 0xf3, 0x2a, 0x71, 0x30, 0xff, 0x39, 0x34, 0x66, 0x3c, 0xad,
	0xdf, 0x47, 0x50, 0x19, 0x86, 0x51, 0xcc, 0xa8, 0x1d, 0xbb, 0xad, 0xc0, 0x6e, 0x51, 0x70, 0x26,
	0xc5, 0x80, 0x11, 0x5b, 0xf5, 0xdf, 0xcf, 0x34, 0xda, 0xbe, 0xf8, 0x10, 0x60, 0xfc, 0x29, 0x0e,
	0x79, 0x3f, 0x11, 0x52, 0xdb, 0x5f, 0x50, 0x33, 0x99, 0x6c, 0xb2, 0xf1, 0x11, 0x6c, 0x53, 0xae,
	0xfa, 0xf9, 0x24, 0xf5, 0x0b, 0xae, 0xfd, 0x4f, 0xb9, 0x7a, 0x6d, 0xb2, 0x99, 0xd9, 0xbd, 0x9f,
	0x08, 0xe0, 0x7c, 0xba, 0xf2, 0xf8, 0x04, 0x60, 0xb6, 0x1d, 0xd8, 0xb3, 0x9a, 0x96, 0x56, 0xb8,
	0xb9, 0xbf, 0xa2, 0x62, 0x35, 0xbd, 0x81, 0xad, 0xf9, 0xe9, 0xc2, 0x07, 0x45, 0xf0, 0xe2, 0x2a,
	0x34, 0x0f, 0xff, 0x52, 0xb5, 0xed, 0x5e, 0x40, 0xd5, 0x49, 0xc7, 0x8b, 0x1e, 0xbb, 0x16, 0xf7,
	0x96, 0xf2, 0xf9, 0xe5, 0xd3, 0xc6, 0xf7, 0x49, 0x0b, 0xfd, 0x98, 0xb4, 0xd0, 0xaf, 0x49, 0x0b,
	0x7d, 0xfd, 0xdd, 0xfa, 0x6f, 0x50, 0x31, 0xc8, 0xc7, 0x7f, 0x02, 0x00, 0x00, 0xff, 0xff, 0x87,
	0x5a, 0x0f, 0xad, 0xe8, 0x04, 0x00, 0x00,
}
